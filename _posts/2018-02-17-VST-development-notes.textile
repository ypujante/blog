---
layout: post
title: "VST Development Notes"
category: vst
tags:
 - vst2
 - vst3
 - music
---
As I am learning about VST development I wanted to share my notes, first as a way to document my own understanding for the future and second as a way to help others following a similar path.

<div class="warning">This is currently a work in progress. This is not meant to be generic for all platforms and is only focusing on macOS.</div>

h2. Configuration

At the time of this writing (February 2018) I am using: 

* Hardware: MacBook Pro (Mid 2014) / 2.8Ghz Intel Core i7 / 16GB
* macOS High Sierra 10.13.3
* Xcode 9.2
* CLion 2017.3.3

h2. Notes

h3. Install

Version VST 3 / 368 (vstsdk368_08_11_2017_build_121) downloaded from "Steinberg":https://www.steinberg.net/en/company/developers.html

After unpacking, run 

{% highlight text %}
./copy_vst2_to_vst3_sdk.sh
{% endhighlight %}

to make sure that we can build VST2 wrappers as well (VST3 is very poorly supported, ex: Maschine by Native Instruments or Reason by Properllerhead do not support it)

h3. Documentation

Documentation starts with <code>VST3_SDK/index.html</code> and is not really beginner friendly.

h3. Building the SDK and examples

The section named _"How to use cmake for Building VST 3 Plug-in"_ is a bit confusing to me

* first of all, CMake is not used (directly) to build VST 3 plugins. CMake is used to generate a platform dependent project (ex: Xcode project for Mac, Visual Studio project for Windows or Makefiles). This project (hence the build framework associated with it) is then used to build the examples provided in the sdk as well as compile the SDK itself (multiple libraries) and some tools.
* second of all, this section has no explanation on how you build your OWN VST plugins.

I investigated 2 ways of building the SDK and examples: one with Xcode and one with CLion

h4. Building the SDK (with Xcode)

h5. Generate Xcode project

* Run <code>cmake-gui</code> (version 3.9.4 installed from "CMake download":https://cmake.org/download/) from anywhere.
* In the <code>Where is the source code:</code> field, point to the <code>VST3_SDK</code> folder.
* In the <code>Where to build the binaries:</code> field, point to any folder you want but since it will create a project whose purpose is to build the SDK I choose to put it at the same level as <code>VST3_SDK</code> and call it <code>build</code>.
* Click <code>Configure</code> (and approve creation of the output folder if it does not exist).
* Select <code>Xcode</code> for the _generator_ for this project.
* Once the configuration completes, the Name/Value section will have some default values. Check the <code>SMTG_CREATE_VST2_VERSION</code> option because we want to build VST2 plugins as well.
* Click <code>Generate</code>

h5. Build the again example

<div class="info">All this is relative to the <code>Where to build the binaries:</code> folder previously set (which in my case is <code><SDK_ROOT>/build</code>)</div>

* Under the output folder previously selected there is now a Xcode project called <code>vstsdk</code>. Double click to open in Xcode.
* In the <code>Scheme</code> selection dropdown (on the right of the buttons that look like play & stop), select <code>again / My Mac</code>
* Now select menu <code>Product/Build</code> to build <code>again</code> plugin
* The result of the build will be stored under <code>VST3/Debug/again.vst3</code>
* As a side effect of this build, some libraries were generated (under <code>lib/Debug</code>) and a validator tool (<code>bin/Debug/validator</code>)
* Run the validator tool:

{% highlight text %}
./bin/Debug/validator VST3/Debug/again.vst3
...
* Scanning classes...

  Factory Info:
	vendor = Steinberg Media Technologies
	url = http://www.steinberg.net
	email = mailto:info@steinberg.de

  Class Info 0:
	name = AGain VST3
	category = Audio Module Class
	cid = 84E8DE5F92554F5396FAE4133C935A18

  Class Info 1:
	name = AGain VST3Controller
	category = Component Controller Class
	cid = D39D5B65D7AF42FA843F4AC841EB04F0

  Class Info 2:
	name = AGain SideChain VST3
	category = Audio Module Class
	cid = 41347FD6FED64094AFBB12B7DBA1D441
...
-------------------------------------------------------------
Result: 78 tests passed, 0 tests failed
-------------------------------------------------------------
{% endhighlight %}

<div class="info">Note that the <code>validator</code> tool is actually run automatically part of the build (it is an option in the cmake build file which is ON by default).</div>

* Copy the plugin as a VST2 plugin for local testing
{% highlight text %}
cp -r VST3/Debug/again.vst3 ~/Library/Audio/Plug-Ins/VST/again.vst
{% endhighlight %}

* Open a DAW application (Maschine in my example) and assign the plugin to a sound (the plugin is under <code>Steinberg Media Technologies</code>)

h4. Building the SDK (with CLion)

"Clion":https://www.jetbrains.com/clion/ can actually work directly with CMake thus making the process more straighforward and cleaner as you are only dealing with the original project. The drawback of using the previous approach (using CMake to generate an Xcode project) is that if you modify the Xcode project (for example add a resource to a plugin) it is not reflected in the CMake world. On the other end, CLion shows the original project and use CMake directly, so as a result if you add a resource to the project it will be added to the CMake world.

<div class="warning">Unfortunately, the _hack_ that was introduced by Steinberg in the <code>again/CMakeLists.txt</code> build file for handling VST2 is Xcode specific and does not work with CLion (or simple Makefiles). In order to fix this issue and make it Mac specific (vs Xcode specific), you need to:
</div>

* add a file <code>public.sdk/source/main/macexport_vst2.exp</code> with the following content (exporting the VST3 specific symbols + the VST2 specific one to make the plugin work either as a VST3 or VST2 plugin)
{% highlight text %}
_GetPluginFactory
_bundleEntry
_bundleExit
_VSTPluginMain
{% endhighlight %}

* change the <code>again/CMakeLists.txt</code> section to use it

{% highlight text %}
if (SMTG_CREATE_VST2_VERSION)
  message(STATUS "SMTG_CREATE_VST2_VERSION is set for ${target}. A VST 2 version of the plug-in will be created (just rename the generated file from .vst3 to .vst).")
  if(MAC)
  # fix missing VSTPluginMain symbol when also building VST 2 version
    smtg_set_exported_symbols(${target} "${SDK_ROOT}/public.sdk/source/main/macexport_vst2.exp")
  endif()
  if (WIN)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  endif()
endif()
{% endhighlight %}


* Once this is done you can simply open the project with CLion (folder <code>VST3_SDK</code>)
* Then under the menu <code>Preferences / Build,Execution,Deployment / CMake</code> add the <code>CMake options</code>: 
{% highlight text %}
-DSMTG_CREATE_VST2_VERSION=ON
{% endhighlight %}
* Note that you can change the <code>Generation path:</code> so that it is outside the source folder (which I personally prefer)
* Select the <code>again | Debug</code> configuration (similar to Xcode scheme) and select the menu item <code>Run / Build</code>
* The outcome will be under <code>VST3</code> (relative to <code>Generation Path</code>)

Testing with <code>validator</code> and deploying to a DAW are the same as the Xcode section with the difference that there is no <code>Debug</code> subfolders (if you use the default <code>Generation Path</code>, the <code>debug</code> concept is part of the directory name).

<div class="info">Note that the <code>validator</code> tool is actually run automatically part of the build (it is an option in the cmake build file which is ON by default).</div>

h3. Building your own VST plugin

After spending quite a bit of time trying to figure out how to build my own VST plugin, it boggles my mind that there is no instructions on how to do that at all.

All the examples are nested inside the SDK and their <code>CMakeLists.txt</code> build file depend on the fact that they are inside the SDK and included by the top level one: variables defined at a higher level, cmake functions included at a higher level, etc... So every single sample build file does not provide any example of building a VST plugin outside the SDK. In fact the documentation does not even talk about how you would go about building your own. They don't even mention: _"simply copy an example and modify it"_ which seems to be the most obivous one. Nothing.

Just let that sink in for a second... Imagine wanting to build an android app. You download the android SDK and all the android app examples that come with the SDK are deeply nested in the SDK and every build file depend on the fact that they are located inside the SDK. And in order to build an android app (without rewriting all the build files), you need to physically locate your files inside the android SDK. Wouldn't this be crazy? Well that is what the VST3 SDK does (to the best of my understanding)...

h4. Building your own first VST plugin (the dirty way)

Moving forward I am using CLion as it is a lot easier and remove the extra step of building an Xcode or Visual Studio project. I am calling this method _the dirty way_ because it ends up locating the plugin inside the SDK (see previous section).

* to minimize the _crazyness_ of this approach, I copied the <code>again</code> example *outside* the SDK and renamed it <code>MyAgain</code>. And because it is outside the SDK, I can actually put it under version control...
<div class="warning">Make sure you copy <code>again</code> after the fix of the hack for VST2 support (as described previously)</div>
* I then create a symbolic link inside the <code>public.sdk/samples/vst</code> folder.
* I then open the project in CLion using the root of the SDK (<code>VST3_SDK</code>)
* In CLion <code>Preferences / Version Control</code> you can specify a directory under version control and once you do, then _magically_ your files are properly flagged in the editor!
* I then modified a few values in <code>version.h</code> and <code>againentry.cpp</code> to change the name of the plugin and the author.
* There is now a new configuration to build the plugin <code>MyAgain | Debug</code> which can be selected to build the new plugin.
* It can then be deployed as described previously (copy/rename in the <code>~/Library/Audio/Plug-Ins/VST/</code> folder)

h4. Building your own first VST plugin (cleaner way)

After struggling quite a bit, I was able to extract the right portions of the build files in order to build the <code>again</code> plugin completely outside the SDK: the idea is that the <code>CMakeLists.txt</code> of the project _includes_ (a modified version of) the one coming with the SDK and _relies_ on its location (<code>VST3_SDK_ROOT</code>). The full source code is available on github "vst3-again-sample":https://github.com/pongasoft/vst3-again-sample

<div class="info">Note that this project includes the proper fix for VST2 so there is no need to patch the SDK.</div>

It is probably not the best solution but that is the best I could do. It does achieve the fact that it is a self contained, properly version controlled project, which depends on the SDK. I just wished Steinberg was distributing the SDK with a native/tested/bullet proof way to do this.

This post will be updated soon...

_Last edited: 2018/03/01_

