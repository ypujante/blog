---
layout: post
title: "VST (3.6.9) Development Notes - Part 3"
category: vst
tags:
 - vst2
 - vst3
 - music
---
In "Part 2":{{site.url}}{% post_url 2018-03-14-VST-development-notes-part2 %}, we created a fully functioning VST2/VST3 plugin whose sole action was to remove 3dB of headroom to the input signal (no UI). Part 3 focuses on adding a UI with a control to actually do the primary job of the A/B switch: switching between input A and input B.

<div class="warning">Check "Part 1":{{site.url}}{% post_url 2018-03-12-VST-development-notes %} for platform requirements and assumptions.</div>

h3. Setup

This project is available on github: "vst-ab-switch":https://github.com/pongasoft/vst-ab-switch. Make sure you checkout the <code>blog-part3-369</code> tag in order to follow along with this part (or "browse":https://github.com/pongasoft/vst-ab-switch/tree/blog-part3-369 the code directly on github)

<div class="info">As mentioned in Part 1, I am now using CLion exclusively but it should be fairly trivial to generate the Xcode project or using <code>cmake</code> directly as explained in Part 1.</div>

All the source files are located under <code>src/cpp</code>

h3. Creating the UI

As described in Part 2, using the <code>editorhost</code> app (or deploying the plugin in an actual DAW), you can right click on the background to open the editor. The documentation that comes with the SDK describes the editor a little bit.

<figure class="image"><img src="{{ site.url }}/resource/images/2018-03-17/editorapp.jpg" alt="editorapp" border="0" width="100%" style=""/><figcaption>This is what the editor will look like at the end of this exercise</figcaption></figure>

h4. Changing the background color

The top right area shows the parameters that you can edit for the "view" that is selected in the top left area (called Editor). To change the background color (of the only current view), simply click on the <code>background-color</code> selection box. I selected <code>~BlueCColor~</code> to make it different from the default.

h4. Adding simple text

The bottom right section has multiple tabs. The first one is called <code>Views</code> and lists all the views that the editor knows about. Each view corresponds to a C++ class (feel free to look at the source code of the SDK to see what each class does, although the comments/documentation is quite limited). You then drag and drop a view from this list into the editor. I dragged the one called <code>Label</code> (C++ class being <code>CTextLabel</code>) and changed some properties like the title, background color, etc... to create the _A/B Switch_ title.

If you want to change the font to one that is not listed, you need to go into the <code>Fonts</code> tab in the bottom right section and add the font there. It will then appear in the dropdown selection.

<div class="warning">From what I could understand, when adding a font, it simply adds the name of the font in the xml file, not the actual font. It is very unclear to me what would happen in the event the font does not exist on a user machine. That is why I don't think it is a good idea to add a font and would recommend that the text that appears in the UI of the plugin be part of the background image (scaling/HiDPI is handled!).</div>

h4. Adding the switch/toggle

To add the toggle, I used the <code>OnOff Button</code> view (<code>COnOffButton</code>) and resized it to 50x50. An on/off button is a view that has 2 states which can get toggled by clicking on it.

In order for the button to have an image that will change when the toggle is clicked, you need to:

* create one image that contains the 2 frames on top of each other. Or in other words, the image is twice as tall (see the file <code>resource/Control_AudioSwitch.png</code>).

<figure class="image"><img src="https://github.com/pongasoft/vst-ab-switch/raw/blog-part3-369/resource/Control_AudioSwitch.png" alt="Control_AudioSwitch.png" border="0" style=""/><figcaption>The image contains 2 frames </figcaption></figure>

* on the <code>Bitmaps</code> tab of the bottom right panel, click the <code>+</code> and select the image
* now in the parameters area, you can now select the image you just added, in the dropdown of the <code>bitmap</code> entry.

<div class="warning">I spent a huge amount of time trying to figure out why this was not working at first. I actually found a bug in the SDK (see "forum":https://sdk.steinberg.net/viewtopic.php?f=5&t=533): the filename of the image is parsed to determine the scale (used for HiDPI) and so my image (originally) called <code>Control_AudioSwitch_50x100.png</code> ended up being treated as a 50x scale.</div>

If you exit the _Editing_ mode (which you can do by clicking on the <code>x</code> next to <code>Editing</code> in the menu bar), you can now click on the image and it changes to say <code>In A</code> or <code>In B</code>.

h4. Saving

Once you are done, you save the new UI by clicking <code>File/Save As...</code>. The file needs to be saved under the <code>resource</code> folder and to match what the C++ code expects (see <code>ABSwitchController</code> constructor): it should be called <code>ABSwitch.uidesc</code>. The image(s) also need to be under the <code>resource</code> folder.

<div class="warning">You may need to edit the file generated to remove the absolute path that gets saved for the bitmap (see <code>ABSwitch.uidesc</code>) checked in.</div>

The file contains a <code><custom>...</custom></code> section which represents the state of the editor and can be safely removed (although it is probably good to keep it while you are working on the UI).

h4. Bonus: automatic scaling

Based on the helloworld sample that comes with the SDK (and the bug I found), I realized that if you generate an image called <code>Control_AudioSwitch_2x.png</code> and add it to the <code>Bitmaps</code> section, the UI will automatically use it on HiDPI screen like retina displays!

h3. Adding a parameter to the code

Now that we have a UI, we need to tie the UI to the code so that toggling the switch actually does something.

h4. Declaring the parameter in the controller

The controller (<code>ABSwitchController</code>) declares the parameter we just created in the <code>initialize</code> method:

{% highlight cpp %}
// the toggle that switches between A and B input
parameters.addParameter(STR16 ("Audio Switch"), // title
                        STR16 ("A/B"), // units
                        1, // stepCount => 1 means toggle
                        0, // defaultNormalizedValue => we start with A (0)
                        Vst::ParameterInfo::kCanAutomate, // flags
                        ABSwitchParamID::kAudioSwitch, // tag
                        0, // unitID => not using units at this stage
                        STR16 ("Switch")); // shortTitle
{% endhighlight %}

* <code>parameters</code> is a field that comes from the <code>EditController</code> class that the controller inherits from and is used to declare/register a parameter
* a <code>stepCount</code> of 1 indicates it is a toggle
* the <code>defaultNormalizedValue</code> specifies the original value of the parameter, which we set to 0 (which represents Input A)
* the <code>tag</code> (defined in <code>ABSwitchCIDs.h</code>) is very important as it is the value that ties all the pieces together (the value comes from an enum and is set to <code>1000</code>). Note that it is unclear to me what the actual allowed range for this tag is. Can it start at 0 for example? The helloworld sample code uses 500 and 1000... so I used a similar value.
* I have no idea how _short_ the short title is supposed to be (could not find an obvious explanation)

In order for the controller to be able to restore its state (for example after loading a project which contains this plugin), the <code>setComponentState</code> method needs to be implemented:

{% highlight cpp %}
tresult ABSwitchController::setComponentState(IBStream *state)
{
  // we receive the current state of the component (processor part)
  if(state == nullptr)
    return kResultFalse;

  // using helper to read the stream
  IBStreamer streamer(state, kLittleEndian);

  // ABSwitchParamID::kAudioSwitch
  float savedParam1 = 0.f;
  if(!streamer.readFloat(savedParam1))
    return kResultFalse;
  setParamNormalized(ABSwitchParamID::kAudioSwitch, savedParam1);

  return kResultOk;
{% endhighlight %}

The state is provided as an <code>IBStream</code> and using the helper class <code>IBStreamer</code> you can read what was previously saved (see processor). Note how the value read from the stream is assigned to the proper parameter by using the <code>setParamNormalized</code> and tag previously used during registration!

h4. Adding the parameter to the UI

In the UI editor, you now add a tag in the <code>Tags</code> tab of the bottom right area. I called it <code>Param_AudioSwitch</code> with a value of 1000 (which is the tag defined in the controller!).

Then the on/off button view needs to be edited to select this tag in the <code>control-tag</code> entry.

Don't forget to save the UI.

h4. Handling the parameter in the processor

Quite surprisingly, you don't register/declare the parameter in the processor. You just _use_ it. That being said, the parameter is usually represented by an actual concept in the processor code. In this case, the field <code>fSwitchState</code> (whose type is backed up by an enum class for clarity) represents which input is currently used.

h5. Persistence

Similarly to the controller, you need to implement a couple of methods to read and write the parameter to handle persistence (for example, loading/saving a project).

{% highlight cpp %}
// called to restore the state in the processor
tresult ABSwitchProcessor::setState(IBStream *state)
{
  if(state == nullptr)
    return kResultFalse;

  IBStreamer streamer(state, kLittleEndian);

  // ABSwitchParamID::kAudioSwitch
  float savedParam1 = 0.f;
  if(!streamer.readFloat(savedParam1))
    return kResultFalse;

  fSwitchState = ESwitchStateFromValue(savedParam1);

  return kResultOk;
}
{% endhighlight %}

This method is very similar to the one implemented in the controller with the difference that it saves the parameter value in the local <code>fSwitchState</code> field.

{% highlight cpp %}
// called to save the state
tresult ABSwitchProcessor::setState(IBStream *state)
{
  IBStreamer streamer(state, kLittleEndian);
  streamer.writeFloat(fSwitchState == ESwitchState::kA ? 0 : 1.0f);
  return kResultOk;
}
{% endhighlight %}

This method is the one that generates the stream in the first place. In this case the streamer is used to write the content of the local <code>fSwitchState</code> field to the stream.

h5. Updates

Finally, the last remaining piece of the puzzle is how the processor gets notified of changes in the UI (or through automation). Every time the <code>process</code> method is called, the <code>ProcessData</code> argument contains an entry referencing all the parameters that have changed since the last call to <code>process</code> (for clarity I have extracted this step into a separate method).

{% highlight cpp %}
void ABSwitchProcessor::processParameters(IParameterChanges &inputParameterChanges)
{
  int32 numParamsChanged = inputParameterChanges.getParameterCount();
  for(int i = 0; i < numParamsChanged; ++i)
  {
    IParamValueQueue *paramQueue = inputParameterChanges.getParameterData(i);
    if(paramQueue != nullptr)
    {
      ParamValue value;
      int32 sampleOffset;
      int32 numPoints = paramQueue->getPointCount();

      // we read the "last" point (ignoring multiple changes for now)
      if(paramQueue->getPoint(numPoints - 1, sampleOffset, value) == kResultOk)
      {
        switch(paramQueue->getParameterId())
        {
          case kAudioSwitch:
            fSwitchState = ESwitchStateFromValue(value);
            break;

          default:
            // shouldn't happen?
            break;
        }
      }
    }
  }
}
{% endhighlight %}

* the outer loop iterates over every change (in this case there should be at most 1)
* the code is a little bit complicated because you do not get just a single value but potentially multiple values: every call to <code>process</code> handles several samples and the parameter may actually change at different points in time during this window. The _"Parameters and Automation"_ section in the VST SDK documentation is actually pretty good at describing what could happen (check the diagram at the bottom of the page!).
* for our case, we are simplifying and simply taking the last known value in the interval for our value
* note how the <code>switch</code> statement determines which parameter we are talking about

<div class="info">As you can see there is a lack of consistency: in the UI editor and the controller, it is called _tag_. Here it is called _parameterId_. But it is the same thing!</div>

h5. Use

Now that we know how the parameter gets persisted and updated, we can simply use it. After all this, the actual value is stored in the <code>fSwitchState</code> field, ready to be used in the rest of the code.

In the <code>initialize</code> method we register another stereo audio input (B):

{% highlight cpp %}
...
  // 2 ins (A and B) => 1 out
  addAudioInput(STR16 ("Stereo In A"), SpeakerArr::kStereo);
  addAudioInput(STR16 ("Stereo In B"), SpeakerArr::kStereo);
  addAudioOutput(STR16 ("Stereo Out"), SpeakerArr::kStereo);
...
{% endhighlight %}

The logic is now almost trivial!

{% highlight cpp %}
...
  int inputIndex = 0;

  // this is where the "magic" happens => determine which input we use (A or B)
  if(data.numInputs > 1)
    inputIndex = fSwitchState == ESwitchState::kA ? 0 : 1;

  AudioBusBuffers &stereoInput = data.inputs[inputIndex];
  AudioBusBuffers &stereoOutput = data.outputs[0];
  
...

  // simply copy the samples
  memcpy(out[i], in[i], sampleFramesSize);

...
{% endhighlight %}

The <code>fSwitchState</code> field is used to determine which stereo input we should use. The rest of the logic simply copies the input samples to the output stereo pair (removed the gain section from Part 2) using <code>memcpy</code> for each channel (left and right).

h3. Conclusion

At this stage we have a fully working A/B switch. It's not pretty, it doesn't have all the bells and whistle of the Rack Extension but the core part of the plugin is doing what it is supposed to do. The final version should be very similar to the Rack Extension (minus CV handling which is not available in the VST world :( ).

h3. Next

Check out "Part 4":{{site.url}}{% post_url 2018-03-24-VST-development-notes-part4 %} for some more notes and comments regarding the remainder of the implementation.

_Last edited: 2018/03/24_
