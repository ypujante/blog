---
layout: post
title: "How to enable log4j output during testing with gradle and IDEA"
category: java
tags:
 - testing
 - gradle
 - IDEA
 - log4j
---
This post comes from my frustration with the following error messages when running tests:

{% highlight text %}
log4j:WARN No appenders could be found for logger (<your class name goes here>).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
{% endhighlight %}

h2. Background

For logging purposes, I use log4j. 

Most of the services I write, and that are started with a command line interface, are using the <code style="white-space:nowrap;">-Dlog4j.configuration=yyy</code> configuration property to point to the proper log4j configuration. So it works.

The issue is that when you run tests for the same code that uses log4j, the tests are started differently, whether it is in your IDE (in my case IDEA) or using the build framework (in my case <code>gradle</code>): they do not have this property provided. So you end up with this log4j warning message. The big issue though is not really the warning message, it is the fact that for some odd reason, log4j just swallows any single output moving forward, which I am not entirely sure is the smartest way to handle it.

h2. Solution

Here is what I did to resolve the issue (I am sure there are other ways, but this one works and is pretty simple):

h3. Create a log4j project

In your multi-project build (<code>gradle</code>), create a brand new project:

{% highlight text %}
log4j-test-config/
  src/
    main/
      resources/
        log4j.xml
  build.gradle
{% endhighlight %}

This is the content of <code>log4j.xml</code>:

{% highlight xml %}
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
  <appender name="ConsoleAppender" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d{yyyy/MM/dd HH:mm:ss.SSS} %p [%c{1}] %m%n" />
    </layout>
  </appender>
  <root>
    <priority value="warn"/>
    <appender-ref ref="ConsoleAppender"/>
  </root>
</log4j:configuration>
{% endhighlight %}

and this is the content of <code>build.gradle</code>

{% highlight groovy %}
apply plugin: 'java'
dependencies {
  runtime spec.external.slf4jLog4j
  runtime spec.external.log4j
}
{% endhighlight %}

h3. Add a test dependency in your other projects

Thanks to <code>gradle</code> support for multi-project build, in any project in which you have tests, simply add a (<code>testRuntime</code>) dependency to the <code>log4j-test-config</code> project:

{% highlight groovy %}
apply plugin: 'groovy'

dependencies {
  compile spec.external.linkedinUtilsCore
  compile spec.external.slf4j
  compile spec.external.zookeeper

  testCompile spec.external.groovyTest
  testCompile spec.external.linkedinUtilsGroovy
  testCompile spec.external.junit
  testRuntime spec.external.slf4jLog4j
  testRuntime project(':log4j-test-config') // this is where the "magic" happens!
}
{% endhighlight %}

h3. Running tests

Now when you run your tests with <code>gradle</code>, it will automatically pick up the jar file generated by the <code>log4j-test-config</code> project and add it to the classpath => the file <code>log4j.xml</code> will be on the classpath and log4j will be happy.

If you issue <code>gradle cleanIdea idea</code> then gradle will rebuild the IDEA project and add the proper dependency within the ide itself => when you run your test directly in IDEA, then the same happens and you get log4j output!

<div class="info"><img src="{{ site.url }}/resource/info_48x48.png" alt="info_48x48.png" border="0" width="21" height="21" />You can simply change <code>warn</code> in the <code>log4j.xml</code> file with any other value during testing/debugging and it will automatically be picked up by IDEA or gradle...</div>

