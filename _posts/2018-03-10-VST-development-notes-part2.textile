---
layout: post
title: "VST (3.6.8) Development Notes - Part 2"
category: vst
tags:
 - vst2
 - vst3
 - music
---
<div class="warning">I am currently in the process of updating these notes for 3.6.9 which was released on 2018/03/01. There are some issues with the new version that I am trying to sort out... stay tuned... As a result these instructions are 3.6.8 specific only.</div>

In "Part1":{{site.url}}/vst/2018/02/17/VST-development-notes, I described my first steps in installing the VST3 SDK and compiling a basic plugin in its own environment. Part2 focuses on the content of a plugin. For this exercise, I am reimplementing the "A/B Audio Switch":https://pongasoft.com/rack-extensions/ABSwitch.html rack extension since the logic is fairly simple while still touching many areas of plugin development.

<div class="warning">This is currently a work in progress and will be updated regularly. This is not meant to be generic for all platforms and is only focusing on macOS. Check "Part1":{{site.url}}/vst/2018/02/17/VST-development-notes for platform requirements and assumptions.</div>

h3. Setup

This project is available on github: "vst-ab-switch":https://github.com/pongasoft/vst-ab-switch. Make sure you checkout the <code>blog-part2</code> tag in order to follow along with this part.

<div class="info">As mentioned in Part 1, I am now using CLion exclusively but it should be fairly trivial to generate the Xcode project or using <code>cmake</code> directly as explained in Part 1.</div>

All the source files are located under <code>src/cpp</code>

h3. Processor and Controller

As described in the documentation, a plugin is made up of 2 main concepts:

* the processor in charge of doing all the actual audio processing (deal with audio samples, midi events, etc...)
* the controller in charge of the UI (vu meters, knobs, mouse events, etc...)

Each concept is represented by a main class, in this case <code>ABSwitchProcessor</code> and <code>ABSwitchController</code> which inherit/implement the required interfaces/classes.

h3. Main entry point(s)

When the host/DAW loads the plugin, it needs to get a handle to the classes. This is a bit convoluted and frankly not explained at all in the documentation. So this is what I could gather from looking at the examples and SDK source code.

h4. Class IDs

Each class defines a unique ID (actually each class in the SDK has a unique ID as well). The file <code>ABSwitchCIDs.h</code> declares the unique ID for the 2 main classes:

{% highlight cpp %}
static const ::Steinberg::FUID ABSwitchProcessorUID(0x8d605466, 0x25154967, 0x85ddbb25, 0x8ac01235);
static const ::Steinberg::FUID ABSwitchControllerUID(0x82aea4a3, 0x5b4e4a5f, 0xa3d68b1a, 0x8a1b69c5);
{% endhighlight %}

There is no indication in the documentation about how you are supposed to generate those IDs. The source code for class <code>FUID</code> states _"Handling 16 Byte Globally Unique Identifiers"_. It is not clear whether this ID needs to be unique across all plugins or just unique within the plugin itself (without colliding with the SDK). I generated these using java <code>java.lang.UUID.randomUUID()</code> (see "javadoc":https://docs.oracle.com/javase/9/docs/api/java/util/UUID.html).

h4. VST2 entry point

The VST3 SDK contains a helper wrapper to wrap a VST3 plugin into a VST2 plugin. The main entry point for VST2 is defined in <code>ABSwitchVST2.cpp</code>:

{% highlight cpp %}
::AudioEffect *createEffectInstance(audioMasterCallback audioMaster)
{
  return Steinberg::Vst::Vst2Wrapper::create(GetPluginFactory(),
                                             pongasoft::VST::ABSwitchProcessorUID,
                                             'TBDx',
                                             audioMaster);
}
{% endhighlight %}

It simply uses the ID of the processor. Note that the VST2 unique ID is set to <code>TBDx</code> as I have not registered one with Steinberg yet...

<div class="info">If you are familiar with VST2, the main entry point is actually the function
  
  <code>VST_EXPORT AEffect* VSTPluginMain(audioMasterCallback audioMaster);</code>
  
but the VST3 wrapper classes define this method which internally calls <code>createEffectInstance</code>
</div>

h4. VST3 entry point

For VST3, the main entry point is actually the following C-style export function:
{% highlight cpp %}
IPluginFactory* PLUGIN_API GetPluginFactory()
{% endhighlight %}

<div class="info">This information is in the VST3 documentation but quite buried... It is on the VST 3 API / VST-MA page (selected in the sidebar) under the section Plug-ins / Module Factory.</div>

Once the host gets access to the factory, it can then calls it back to instantiate the processor and controller.

Thankfully the implementation of this method, the factory itself and the class registration is all done via a set of macros (see file <code>ABSwitchVST3.cpp</code>):

{% highlight cpp %}
BEGIN_FACTORY_DEF ("pongasoft",
                   "https://www.pongasoft.com",
                   "mailto:support@pongasoft.com")

    // ABSwitchProcessor processor
    DEF_CLASS2 (INLINE_UID_FROM_FUID(::pongasoft::VST::ABSwitchProcessorUID),
                PClassInfo::kManyInstances,  // cardinality
                kVstAudioEffectClass,    // the component category (do not changed this)
                stringPluginName,      // here the Plug-in name (to be changed)
                Vst::kDistributable,  // means that component and controller could be distributed on different computers
                "Fx",          // Subcategory for this Plug-in (to be changed)
                FULL_VERSION_STR,    // Plug-in version (to be changed)
                kVstVersionString,    // the VST 3 SDK version (do not changed this, use always this define)
                pongasoft::VST::ABSwitchProcessor::createInstance)  // function pointer called when this component should be instantiated

    // ABSwitchController controller
    DEF_CLASS2 (INLINE_UID_FROM_FUID(::pongasoft::VST::ABSwitchControllerUID),
                PClassInfo::kManyInstances,  // cardinality
                kVstComponentControllerClass,// the Controller category (do not changed this)
                stringPluginName
                  "Controller",  // controller name (could be the same than component name)
                0,            // not used here
                "",            // not used here
                FULL_VERSION_STR,    // Plug-in version (to be changed)
                kVstVersionString,    // the VST 3 SDK version (do not changed this, use always this define)
                pongasoft::VST::ABSwitchController::createInstance)// function pointer called when this component should be instantiated

END_FACTORY

// from ABSwitchProcessor.h
class ABSwitchProcessor : public AudioEffect {
public:
  // .....
  static FUnknown *createInstance(void * /*context*/) {
    return (IAudioProcessor *) new ABSwitchProcessor();
  }
  // .....
}

// from ABSwitchController.h
class ABSwitchController : public EditController {
public:
  // .....
  static FUnknown *createInstance(void * /*context*/) { 
    return (IEditController *) new ABSwitchController();
  }
  // .....
}
{% endhighlight %}

The macro uses the IDs previously created as well as the factory methods (<code>createInstance</code>) from the processor and controller.

h4. Attaching the controller to the processor

Finally, the controller gets attached to the processor via its ID. See file <code>ABSwitchProcessor.cpp</code>:

{% highlight cpp %}
ABSwitchProcessor::ABSwitchProcessor() : AudioEffect()
{
  setControllerClass(ABSwitchControllerUID);
}
{% endhighlight %}

h3. The processor

The processor (defined in <code>ABSwitchProcessor.h</code>) needs to implement both <code>IComponent</code> and <code>IAudioProcessor</code> as per the documentation. The SDK class <code>AudioEffect</code> implements the basic methods and is used as a starting point for the processor.

h4. Initializing the processor

During the initialization phase of the processor, we define the inputs and outputs of the plugin (see file <code>ABSwitchProcessor.cpp</code>):

{% highlight cpp %}
tresult PLUGIN_API ABSwitchProcessor::initialize(FUnknown *context)
{
  tresult result = AudioEffect::initialize(context);
  if(result != kResultOk)
  {
    return result;
  }

  //---create Audio In/Out buses------
  addAudioInput(STR16 ("Stereo In"), SpeakerArr::kStereo);
  addAudioOutput(STR16 ("Stereo Out"), SpeakerArr::kStereo);

  return result;
}
{% endhighlight %}

<div class="info">In order for the processor to declare that it can handle 64 bits processing, the method <code>canProcessSampleSize</code> needs to be overridden (see file <code>ABSwitchProcessor.cpp</code>).</div>

h4. The actual processing

The actual audio processing takes place in this method (see file <code>ABSwitchProcessor.cpp</code>):

{% highlight cpp %}
tresult PLUGIN_API ABSwitchProcessor::process(ProcessData &data)
{
  // ... see source code
}
{% endhighlight %}

<div class="info">The code is mostly copied from the _again_ sample provided with the SDK.</div>

A few points:

* all the info necessary is provided in the <code>data</code> parameter
* <code>data.inputs[0]</code> refers to the Stereo In pair defined during initialization
* <code>data.outputs[0]</code> refers to the Stereo Out pair defined during initialization
* <code>in[0]</code> represents the first channel of the Stereo In pair (the left channel). It is an array of samples of size <code>data.numSamples</code>. <code>in[1]</code> represents the other channel (right).
* <code>out[0]</code> represents the first channel of the Stereo Out pair (the left channel). It is an array of samples of size <code>data.numSamples</code>. <code>out[1]</code> represents the other channel (right).
* the _type_ of a sample (ex: <code>in[0][0]</code> is the first sample of the left input pair) is determined by <code>data.symbolicSampleSize</code>. Note how the code uses a templated function (defined in <code>ABSwitchProcess.h</code>) so as not to repeat the code for 32 or 64 bits.

<div class="info">The code is generic and doesn't care how many channels are defined for input or output: it simply multiplies every input sample by 0.5 to generate an output sample.</div>

h3. The controller

The controller (defined in <code>ABSwitchController.h</code>) needs to implement <code>IEditController</code> as per the documentation. The SDK class <code>EditController</code> implements the basic methods and is used as a starting point for this plugin.

h4. Creating the main view

The controller main method is quite simple and returns an instance of <code>VSTGUI::VST3Editor</code>:

{% highlight cpp %}
IPlugView *ABSwitchController::createView(const char *name)
{
  if(name && strcmp(name, ViewType::kEditor) == 0)
  {
    return new VSTGUI::VST3Editor(this, "view", fXmlFile);
  }
  return nullptr;
}
{% endhighlight %}

This class will read the provided xml file to build the GUI (it is empty so it will render a black square...). This class has an editing mode which allows you to create the UI on the fly with an editor (by right clicking in the UI)! The documentation (section VSTGUI 4 / Inline UI Editing for VST3 (WYSIWYG)) explains the various steps to make it happen (seems complicated), but in my experience it is already built-in in the makefiles so it is quite easy:

{% highlight cmake %}
# from VST3_SDK.cmake
add_compile_options($<$<CONFIG:Debug>:-DVSTGUI_LIVE_EDITING=1>)
{% endhighlight %}

As long as you compile in <code>Debug</code> mode the editor is enabled. Simple.

Although you can start your DAW to load the plugin, the SDK comes with a simple <code>editorhost</code> application (similar to the <code>validator</code> application (see Part 1)) which lets you load the plugin and edit it:

{% highlight bash %}
./vst3-sdk.368/Debug/bin/editorhost.app/Contents/MacOS/editorhost ./vst-ab-switch/Debug/VST3/pongasoft_ABSwitch.vst3
{% endhighlight %}

h3. What we have so far

At this stage we have a fully functioning VST3 and VST2 plugin which simply removes 3dB from the input signal (so we can verify that the plugin gets called properly) and has a blank UI with editing built-in.

Stay tuned for Part 3...

_Last edited: 2018/03/12_
