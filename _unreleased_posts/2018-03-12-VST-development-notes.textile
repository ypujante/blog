---
layout: post
title: "VST (3.6.9) Development Notes - Part 1"
category: vst
tags:
 - vst2
 - vst3
 - music
---
As I am learning about VST development I wanted to share my notes, first as a way to document my own understanding for the future and second as a way to help others following a similar path.


<div class="info">This blog post has been updated to reflect the latest version (3.6.9) released on 2018/03/01.</div>

<div class="warning">This is not meant to be generic for all platforms and is only focusing on macOS.</div>

h2. Configuration

At the time of this writing (February 2018) I am using: 

* Hardware: MacBook Pro (Mid 2014) / 2.8Ghz Intel Core i7 / 16GB
* macOS High Sierra 10.13.3
* Xcode 9.2
* CLion 2017.3.3

h2. Notes

h3. Install

Version VST 3 / 369 (vstsdk369_01_03_2018_build_132) downloaded from "Steinberg":https://download.steinberg.net/sdk_downloads/vstsdk369_01_03_2018_build_132.zip (shasum 256 => <code>7c6c2a5f0bcbf8a7a0d6a42b782f0d3c00ec8eafa4226bbf2f5554e8cd764964</code>).

After unpacking, run 

{% highlight text %}
./copy_vst2_to_vst3_sdk.sh
{% endhighlight %}

to make sure that we can build VST2 wrappers as well (VST3 is very poorly supported, ex: Maschine by Native Instruments or Reason by Propellerhead do not support it)

h3. Documentation

Documentation starts with <code>VST3_SDK/index.html</code> and is not really beginner friendly.

h3. Building the SDK and examples

The section named _"How to use cmake for Building VST 3 Plug-in"_ is a bit confusing to me

* everything relies on <code>cmake</code> but the documentation wants you to create an Xcode (or Visual studio) project. Although this works, it makes it hard to build for cross platform unless you "port" back all the changes you make to the Xcode project into the <code>CMakeLists.txt</code> files. In my mind the source of truth should be the <code>CMakeLists.txt</code>.
* new in version 3.6.9, the ability to build your own plugins. There is actually a brand new documentation page explaining how to do that.

I investigated 2 ways of building the SDK and examples: one with Xcode and one with CLion

h4. Building the SDK, samples and helloworld (with Xcode)

h5. Generate Xcode project

* Run <code>cmake-gui</code> (version 3.9.4 installed from "CMake download":https://cmake.org/download/) from anywhere.
* In the <code>Where is the source code:</code> field, point to the <code>VST3_SDK</code> folder.
* In the <code>Where to build the binaries:</code> field, point to any folder you want
* Click <code>Configure</code> (and approve creation of the output folder if it does not exist).
* Select <code>Xcode</code> for the _generator_ for this project.
* Once the configuration completes, the Name/Value section will have some default values. Check the <code>SMTG_CREATE_VST2_VERSION</code> option because we want to build VST2 plugins as well. Note how the <code>SMTG_MYPLUGINS_SRC_PATH</code> is pointing to the <code>my_plugins</code> folder contained with the distribution, but *oustide* the actual SDK. More on this later.
* Click <code>Generate</code>

h5. Build the again example

<div class="info">All this is relative to the <code>Where to build the binaries:</code> folder previously set.</div>

* Under the output folder previously selected there is now a Xcode project called <code>vstsdk</code>. Double click to open in Xcode.
* In the <code>Scheme</code> selection dropdown (on the right of the buttons that look like play & stop), select <code>again / My Mac</code>
* Now select menu <code>Product/Build</code> to build <code>again</code> plugin
* The result of the build will be stored under <code>VST3/Debug/again.vst3</code>
* As a side effect of this build, some libraries were generated (under <code>lib/Debug</code>) and a validator tool (<code>bin/Debug/validator</code>)
* Run the validator tool:

{% highlight text %}
./bin/Debug/validator VST3/Debug/again.vst3
...
* Scanning classes...

  Factory Info:
	vendor = Steinberg Media Technologies
	url = http://www.steinberg.net
	email = mailto:info@steinberg.de

  Class Info 0:
	name = AGain VST3
	category = Audio Module Class
	cid = 84E8DE5F92554F5396FAE4133C935A18

  Class Info 1:
	name = AGain VST3Controller
	category = Component Controller Class
	cid = D39D5B65D7AF42FA843F4AC841EB04F0

  Class Info 2:
	name = AGain SideChain VST3
	category = Audio Module Class
	cid = 41347FD6FED64094AFBB12B7DBA1D441
...
-------------------------------------------------------------
Result: 78 tests passed, 0 tests failed
-------------------------------------------------------------
{% endhighlight %}

<div class="info">Note that the <code>validator</code> tool is actually run automatically part of the build (it is an option in the cmake build file which is ON by default).</div>

* Copy the plugin as a VST2 plugin for local testing
{% highlight text %}
cp -r VST3/Debug/again.vst3 ~/Library/Audio/Plug-Ins/VST/again.vst
{% endhighlight %}

<div class="info">Note that since 3.6.9, a link into the VST3 folder is automatically created as part of the build (variable <code>SMTG_VST3_TARGET_PATH</code> in <code>cmake-gui</code>). </div>

* Open a DAW application (Maschine in my example) and assign the plugin to a sound (the plugin is under <code>Steinberg Media Technologies</code>)

h5. Build the helloworld example

This is easy and just a matter of selecting another Scheme: <code>helloworldWithVSTGUI > Mac</code> under the drowdown and building it.

<div class="warning">This example is *not* a VST2 plugin!</div>

h4. Building the SDK (with CLion)

<div class="warning">The following instructions which were written with 3.6.8 are no longer working because the direct <code>cmake</code> build is broken in 3.6.9 (see "post":https://sdk.steinberg.net/viewtopic.php?f=4&t=532).</div>

"Clion":https://www.jetbrains.com/clion/ can actually work directly with CMake thus making the process more straightforward and cleaner as you are only dealing with the original project. The drawback of using the previous approach (using CMake to generate an Xcode project) is that if you modify the Xcode project (for example add a resource to a plugin) it is not reflected in the CMake world. On the other end, CLion shows the original project and use CMake directly, so as a result if you add a resource to the project it will be added to the CMake world.

<div class="warning">Unfortunately, the _hack_ that was introduced by Steinberg in the <code>again/CMakeLists.txt</code> build file for handling VST2 is Xcode specific and does not work with CLion (or simple Makefiles). In order to fix this issue and make it Mac specific (vs Xcode specific), you need to:
</div>

* add a file <code>public.sdk/source/main/macexport_vst2.exp</code> with the following content (exporting the VST3 specific symbols + the VST2 specific one to make the plugin work either as a VST3 or VST2 plugin)
{% highlight text %}
_GetPluginFactory
_bundleEntry
_bundleExit
_VSTPluginMain
{% endhighlight %}

* change the <code>again/CMakeLists.txt</code> section to use it

{% highlight cmake %}
if (SMTG_CREATE_VST2_VERSION)
  message(STATUS "SMTG_CREATE_VST2_VERSION is set for ${target}. A VST 2 version of the plug-in will be created (just rename the generated file from .vst3 to .vst).")
  if(MAC)
  # fix missing VSTPluginMain symbol when also building VST 2 version
    smtg_set_exported_symbols(${target} "${SDK_ROOT}/public.sdk/source/main/macexport_vst2.exp")
  endif()
  if (WIN)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
  endif()
endif()
{% endhighlight %}


* Once this is done you can simply open the project with CLion (folder <code>VST3_SDK</code>)
* Then under the menu <code>Preferences / Build,Execution,Deployment / CMake</code> add the <code>CMake options</code>: 
{% highlight text %}
-DSMTG_CREATE_VST2_VERSION=ON
{% endhighlight %}
* Note that you can change the <code>Generation path:</code> so that it is outside the source folder (which I personally prefer)
* Select the <code>again | Debug</code> configuration (similar to Xcode scheme) and select the menu item <code>Run / Build</code>
* The outcome will be under <code>VST3</code> (relative to <code>Generation Path</code>)

Testing with <code>validator</code> and deploying to a DAW are the same as the Xcode section with the difference that there is no <code>Debug</code> subfolders (if you use the default <code>Generation Path</code>, the <code>debug</code> concept is part of the directory name).

<div class="info">Note that the <code>validator</code> tool is actually run automatically part of the build (it is an option in the cmake build file which is ON by default).</div>

h3. Building your own VST plugin

I spent a lot of time trying to figure out how to build my own VST plugin since I started with 3.6.8 which did not provide any means or instructions. This has changed with 3.6.9 which now provides an example plugins folder (<code>my_plugins</code>) and the necessary CMake changes in order to build an _outside the SDK_ project.

Although this is a serious improvement since 3.6.8, I am still not thrilled with the end result:

* instead of having your project depends on the SDK, it is the other way around: you create a project and then you tell the SDK (via <code>SMTG_VST3_TARGET_PATH</code>) where your project is located. This makes it very hard to work with CLion for example, because the root of the project is always the SDK not your project.
* the build location of your project is hardcoded to be <code>build</code> in the source tree of your project
* also note that none of the _helloworld_ examples provided use VST2 (you can use the <code>again</code> sample for that).

h4. Building your own first VST plugin

In order to build my own first plugin and follow the instructions provided in the documentation, I did the following:

* create new folder (outside the SDK) called 
Moving forward I am using CLion as it is a lot easier and remove the extra step of building an Xcode or Visual Studio project. I am calling this method _the dirty way_ because it ends up locating the plugin inside the SDK (see previous section).

* to minimize the _craziness_ of this approach, I copied the <code>again</code> example *outside* the SDK and renamed it <code>MyAgain</code>. And because it is outside the SDK, I can actually put it under version control...
<div class="warning">Make sure you copy <code>again</code> after the fix of the hack for VST2 support (as described previously)</div>
* I then create a symbolic link inside the <code>public.sdk/samples/vst</code> folder.
* I then open the project in CLion using the root of the SDK (<code>VST3_SDK</code>)
* In CLion <code>Preferences / Version Control</code> you can specify a directory under version control and once you do, then _magically_ your files are properly flagged in the editor!
* I then modified a few values in <code>version.h</code> and <code>againentry.cpp</code> to change the name of the plugin and the author.
* There is now a new configuration to build the plugin <code>MyAgain | Debug</code> which can be selected to build the new plugin.
* It can then be deployed as described previously (copy/rename in the <code>~/Library/Audio/Plug-Ins/VST/</code> folder)

h4. Building your own first VST plugin (cleaner way)

After struggling quite a bit, I was able to extract the right portions of the build files in order to build the <code>again</code> plugin completely outside the SDK: the idea is that the <code>CMakeLists.txt</code> of the project _includes_ (a modified version of) the one coming with the SDK and _relies_ on its location (<code>VST3_SDK_ROOT</code>). The full source code is available on github "vst3-again-sample":https://github.com/pongasoft/vst3-again-sample

<div class="info">Note that this project includes the proper fix for VST2 so there is no need to patch the SDK.</div>

It is probably not the best solution but that is the best I could do. It does achieve the fact that it is a self contained, properly version controlled project, which depends on the SDK. I just wished Steinberg was distributing the SDK with a native/tested/bullet proof way to do this.

h3. Next

Now that we know how to build any VST 3 plugin (as well as VST 2) while depending on the SDK, it is time to build your own. This is the point of "Part 2":{{site.url}}/vst/2018/03/10/VST-development-notes-part2.

_Last edited: 2018/03/10_

